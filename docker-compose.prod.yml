services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: typing-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_files:/var/lib/mysql-files
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./my.cnf:/etc/mysql/my.cnf:ro
    networks:
      - typing-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: typing-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - typing-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      timeout: 3s
      retries: 5
      interval: 10s
      start_period: 30s

  # Nginx 反向代理（包含admin静态资源）
  nginx:
    image: ghcr.io/xi-yuer/typing-nginx:latest
    container_name: typing-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
      - '8443:8443'
    volumes:
      # 挂载SSL证书文件（只读模式，确保证书安全）
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - typing-network

  # 主应用（前端 + 后端）
  app:
    image: ghcr.io/xi-yuer/typing:latest
    container_name: typing-app
    restart: unless-stopped
    expose:
      - '3001'
      - '3000'
      - '8080'
    environment:
      # 应用环境
      NODE_ENV: production
      BACKEND_PORT: 3001
      FRONTEND_PORT: 3000
      
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-typing_db}
      DB_USER: ${DB_USER:-typing_user}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
      
      # Redis 配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379
      
      # JWT 配置
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      
      # 前端配置
      NEXT_PUBLIC_BASE_URL: /
      VITE_API_URL: ${VITE_API_URL:-/}
      FRONTEND_URL: ${SERVER_URL:-https://keycikeyci.com}
      NEXT_PUBLIC_GITHUB_SSO_URL: ${SERVER_URL:-https://keycikeyci.com}/api/auth/github/callback
      
      # 功能开关
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-true}
      ENABLE_GUEST_MODE: ${ENABLE_GUEST_MODE:-true}
      ENABLE_SWAGGER: ${ENABLE_SWAGGER:-false}
      ENABLE_CORS: ${ENABLE_CORS:-true}
      
      # GitHub OAuth (可选)
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      GITHUB_CALLBACK_URL: ${GITHUB_CALLBACK_URL:-${SERVER_URL:-https://keycikeyci.com}/api/auth/github/callback}
      
      # QQ OAuth (可选)
      QQ_CLIENT_ID: ${QQ_CLIENT_ID:-}
      QQ_CLIENT_SECRET: ${QQ_CLIENT_SECRET:-}
      QQ_CALLBACK_URL: ${QQ_CALLBACK_URL:-${SERVER_URL:-https://keycikeyci.com}/api/auth/qq/callback}
      
      # 语音服务 (可选)
      YOUDAO_APP_KEY: ${YOUDAO_APP_KEY:-}
      YOUDAO_APP_SECRET: ${YOUDAO_APP_SECRET:-}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - typing-network
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '3001']
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

volumes:
  mysql_data:
    driver: local
  mysql_files:
    driver: local
  redis_data:
    driver: local

networks:
  typing-network:
    driver: bridge
