name: Build and Push Docker Image

# 触发条件
on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

# 环境变量
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置小写仓库名称
      - name: Set lowercase repository name
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      # 设置 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.7.0

      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'pnpm'

      # 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到 GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提取主应用镜像元数据
      - name: Extract app metadata
        id: app-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      # 提取Nginx镜像元数据
      - name: Extract nginx metadata
        id: nginx-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-nginx
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      # 构建并推送主应用 Docker 镜像
      - name: Build and push app Docker image
        id: app-build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.app-meta.outputs.tags }}
          labels: ${{ steps.app-meta.outputs.labels }}

      # 构建并推送 Nginx Docker 镜像
      - name: Build and push nginx Docker image
        id: nginx-build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.nginx
          platforms: linux/amd64
          push: true
          tags: ${{ steps.nginx-meta.outputs.tags }}
          labels: ${{ steps.nginx-meta.outputs.labels }}

      # 输出镜像信息
      - name: Output image info
        run: |
          echo "App Image tags:"
          echo "${{ steps.app-meta.outputs.tags }}"
          echo "App Image digest: ${{ steps.app-build.outputs.digest }}"
          echo ""
          echo "Nginx Image tags:"
          echo "${{ steps.nginx-meta.outputs.tags }}"
          echo "Nginx Image digest: ${{ steps.nginx-build.outputs.digest }}"

  # 自动部署到服务器
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置SSH密钥
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 添加服务器到known_hosts
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # 部署到服务器
      - name: Deploy to server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # 进入项目目录
            cd ${{ secrets.PROJECT_PATH }}
            
            # 拉取最新的镜像（包括nginx）
            docker-compose -f docker-compose.prod.yml pull
            
            # 重启服务
            ./deploy.sh restart
            
            # 清理旧镜像
            docker image prune -f
            
            # 显示服务状态
            ./deploy.sh status
          EOF

      # 健康检查
      - name: Health check
        run: |
          echo "等待服务启动..."
          sleep 30
          
          # 检查服务是否正常运行
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # 进入项目目录
            cd ${{ secrets.PROJECT_PATH }}
            
            # 使用部署脚本检查状态
            ./deploy.sh status
            
            # 检查应用健康状态
            curl -f http://localhost/health || exit 1
            echo "✅ 部署成功！服务运行正常"
            echo "🌐 应用访问地址: http://${{ secrets.SERVER_HOST }}"
          EOF