name: Build and Push Docker Image

# 触发条件
on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

# 环境变量
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置小写仓库名称
      - name: Set lowercase repository name
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      # 设置 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.7.0

      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'pnpm'

      # 构建 admin 资源
      - name: Build admin resources
        run: |
          pnpm install
          # 先构建依赖包
          pnpm packages:build
          # 检查 common 包是否构建成功
          echo "检查 common 包构建结果:"
          ls -la packages/common/dist/
          # 再构建 admin 应用
          pnpm --filter admin build
          
          # 创建 admin 资源压缩包
          cd apps/admin
          tar -czf ../../admin-dist.tar.gz -C dist .
          
          # 显示构建结果
          echo "Admin build completed:"
          ls -la dist/
          echo "Admin archive created:"
          ls -la ../../admin-dist.tar.gz

      # 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到 GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提取元数据
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      # 构建并推送 Docker 镜像
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 输出镜像信息
      - name: Output image info
        run: |
          echo "Image tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Image digest: ${{ steps.build.outputs.digest }}"

  # 自动部署到服务器
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置SSH密钥
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 添加服务器到known_hosts
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # 部署到服务器
      - name: Deploy to server
        run: |
          # 上传 admin 资源到服务器
          scp admin-dist.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.PROJECT_PATH }}/
          
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # 进入项目目录
            cd ${{ secrets.PROJECT_PATH }}
            
            # 解压 admin 资源
            echo "解压 admin 资源..."
            sudo rm -rf /usr/share/nginx/html/admin/*
            sudo tar -xzf admin-dist.tar.gz -C /usr/share/nginx/html/admin/
            sudo chown -R nginx:nginx /usr/share/nginx/html/admin
            rm admin-dist.tar.gz
            echo "Admin 资源部署完成"
            
            # 使用项目自带的部署脚本
            ./deploy.sh pull
            ./deploy.sh restart
            
            # 清理旧镜像
            docker image prune -f
            
            # 显示服务状态
            ./deploy.sh status
          EOF

      # 健康检查
      - name: Health check
        run: |
          echo "等待服务启动..."
          sleep 30
          
          # 检查服务是否正常运行
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # 进入项目目录
            cd ${{ secrets.PROJECT_PATH }}
            
            # 使用部署脚本检查状态
            ./deploy.sh status
            
            # 检查应用健康状态
            curl -f http://localhost/health || exit 1
            echo "✅ 部署成功！服务运行正常"
            echo "🌐 应用访问地址: http://${{ secrets.SERVER_HOST }}"
          EOF